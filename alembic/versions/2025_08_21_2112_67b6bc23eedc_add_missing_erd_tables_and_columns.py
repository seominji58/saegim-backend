"""add_missing_erd_tables_and_columns

Revision ID: 67b6bc23eedc
Revises: 4cd6a44ec12f
Create Date: 2025-08-21 21:12:44.372032+09:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '67b6bc23eedc'
down_revision: Union[str, None] = '4cd6a44ec12f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('images',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('diary_id', sa.Uuid(), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('thumbnail_path', sa.String(length=500), nullable=True),
    sa.Column('mime_type', sa.String(length=50), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('exif_removed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['diary_id'], ['diaries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_diary_images', 'images', ['diary_id'], unique=False)
    op.create_index(op.f('ix_images_diary_id'), 'images', ['diary_id'], unique=False)
    op.add_column('ai_usage_logs', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('ai_usage_logs', 'api_type',
               existing_type=postgresql.ENUM('generate', 'keywords', 'emotion_analysis', name='api_type'),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('ai_usage_logs', 'request_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('ai_usage_logs', 'response_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_ai_usage_logs_session_regen', table_name='ai_usage_logs')
    op.drop_index('idx_ai_usage_logs_user_created', table_name='ai_usage_logs')
    op.drop_index('idx_ai_usage_logs_user_sessions', table_name='ai_usage_logs')
    op.create_index('idx_ai_usage_api_type', 'ai_usage_logs', ['api_type'], unique=False)
    op.create_index('idx_ai_usage_session_regen', 'ai_usage_logs', ['session_id', 'regeneration_count'], unique=False)
    op.create_index('idx_ai_usage_user_created', 'ai_usage_logs', ['user_id', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_ai_usage_user_sessions', 'ai_usage_logs', ['user_id', 'session_id', sa.text('created_at DESC')], unique=False)
    op.create_index(op.f('ix_ai_usage_logs_session_id'), 'ai_usage_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_ai_usage_logs_user_id'), 'ai_usage_logs', ['user_id'], unique=False)
    op.drop_constraint('fk_ai_usage_logs_user_id', 'ai_usage_logs', type_='foreignkey')
    op.create_foreign_key(None, 'ai_usage_logs', 'users', ['user_id'], ['id'])
    op.add_column('diaries', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('emotion_stats', 'emotion',
               existing_type=postgresql.ENUM('happy', 'sad', 'angry', 'peaceful', 'unrest', name='emotion_type'),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.drop_index('idx_emotion_stats_unique', table_name='emotion_stats')
    op.create_index('idx_emotion_stats_emotion', 'emotion_stats', ['emotion'], unique=False)
    op.create_index(op.f('ix_emotion_stats_user_id'), 'emotion_stats', ['user_id'], unique=False)
    op.create_unique_constraint('unique_user_period_emotion', 'emotion_stats', ['user_id', 'year', 'month', 'emotion'])
    op.drop_constraint('fk_emotion_stats_user_id', 'emotion_stats', type_='foreignkey')
    op.create_foreign_key(None, 'emotion_stats', 'users', ['user_id'], ['id'])
    op.create_unique_constraint('uq_users_nickname', 'users', ['nickname'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uq_users_nickname', 'users', type_='unique')
    op.drop_constraint(None, 'emotion_stats', type_='foreignkey')
    op.create_foreign_key('fk_emotion_stats_user_id', 'emotion_stats', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('unique_user_period_emotion', 'emotion_stats', type_='unique')
    op.drop_index(op.f('ix_emotion_stats_user_id'), table_name='emotion_stats')
    op.drop_index('idx_emotion_stats_emotion', table_name='emotion_stats')
    op.create_index('idx_emotion_stats_unique', 'emotion_stats', ['user_id', 'year', 'month', 'emotion'], unique=True)
    op.alter_column('emotion_stats', 'emotion',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('happy', 'sad', 'angry', 'peaceful', 'unrest', name='emotion_type'),
               existing_nullable=False)
    op.drop_column('diaries', 'deleted_at')
    op.drop_constraint(None, 'ai_usage_logs', type_='foreignkey')
    op.create_foreign_key('fk_ai_usage_logs_user_id', 'ai_usage_logs', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_ai_usage_logs_user_id'), table_name='ai_usage_logs')
    op.drop_index(op.f('ix_ai_usage_logs_session_id'), table_name='ai_usage_logs')
    op.drop_index('idx_ai_usage_user_sessions', table_name='ai_usage_logs')
    op.drop_index('idx_ai_usage_user_created', table_name='ai_usage_logs')
    op.drop_index('idx_ai_usage_session_regen', table_name='ai_usage_logs')
    op.drop_index('idx_ai_usage_api_type', table_name='ai_usage_logs')
    op.create_index('idx_ai_usage_logs_user_sessions', 'ai_usage_logs', ['user_id', 'session_id', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_ai_usage_logs_user_created', 'ai_usage_logs', ['user_id', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_ai_usage_logs_session_regen', 'ai_usage_logs', ['session_id', 'regeneration_count'], unique=False)
    op.alter_column('ai_usage_logs', 'response_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('ai_usage_logs', 'request_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('ai_usage_logs', 'api_type',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('generate', 'keywords', 'emotion_analysis', name='api_type'),
               existing_nullable=False)
    op.drop_column('ai_usage_logs', 'updated_at')
    op.drop_index(op.f('ix_images_diary_id'), table_name='images')
    op.drop_index('idx_diary_images', table_name='images')
    op.drop_table('images')
    # ### end Alembic commands ###