"""add_fcm_tables_and_notification_settings

Revision ID: 4cd6a44ec12f
Revises: 1e2f7f09025c
Create Date: 2025-08-21 16:48:08.111775+09:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4cd6a44ec12f'
down_revision: Union[str, None] = '1e2f7f09025c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fcm_tokens',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('device_type', sa.String(length=20), nullable=False),
    sa.Column('device_info', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("device_type IN ('web','android','ios')", name='ck_fcm_device_type'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'token', name='uq_fcm_tokens_user_token')
    )
    op.create_index('idx_fcm_tokens_active', 'fcm_tokens', ['is_active', 'created_at'], unique=False)
    op.create_index('idx_fcm_tokens_device_type', 'fcm_tokens', ['device_type'], unique=False)
    op.create_index('idx_fcm_tokens_user_id', 'fcm_tokens', ['user_id'], unique=False)
    op.create_index(op.f('ix_fcm_tokens_token'), 'fcm_tokens', ['token'], unique=False)
    op.create_table('notification_settings',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('diary_reminder', sa.Boolean(), nullable=False),
    sa.Column('ai_content_ready', sa.Boolean(), nullable=False),
    sa.Column('emotion_trend', sa.Boolean(), nullable=False),
    sa.Column('anniversary', sa.Boolean(), nullable=False),
    sa.Column('friend_share', sa.Boolean(), nullable=False),
    sa.Column('quiet_hours_enabled', sa.Boolean(), nullable=False),
    sa.Column('quiet_start_time', sa.String(length=5), nullable=True),
    sa.Column('quiet_end_time', sa.String(length=5), nullable=True),
    sa.Column('frequency', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', name='uq_notification_settings_user_id')
    )
    op.create_index('idx_notification_settings_user_id', 'notification_settings', ['user_id'], unique=False)
    op.create_table('notification_history',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('fcm_token_id', sa.Uuid(), nullable=True),
    sa.Column('notification_type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('body', sa.String(length=1000), nullable=False),
    sa.Column('data_payload', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('error_message', sa.String(length=1000), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('opened_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("notification_type IN ('diary_reminder','ai_content_ready','emotion_trend','anniversary','friend_share','general')", name='ck_notification_type'),
    sa.CheckConstraint("status IN ('sent','failed','pending','delivered','opened')", name='ck_notification_status'),
    sa.ForeignKeyConstraint(['fcm_token_id'], ['fcm_tokens.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notification_history_sent_at', 'notification_history', ['sent_at'], unique=False)
    op.create_index('idx_notification_history_status', 'notification_history', ['status'], unique=False)
    op.create_index('idx_notification_history_type', 'notification_history', ['notification_type'], unique=False)
    op.create_index('idx_notification_history_user_id', 'notification_history', ['user_id'], unique=False)
    op.drop_index('idx_ai_usage_logs_session_regen', table_name='ai_usage_logs')
    op.drop_index('idx_ai_usage_logs_user_created', table_name='ai_usage_logs')
    op.drop_index('idx_ai_usage_logs_user_sessions', table_name='ai_usage_logs')
    op.drop_table('ai_usage_logs')
    op.drop_index('idx_emotion_stats_unique', table_name='emotion_stats')
    op.drop_index('idx_emotion_stats_user_period', table_name='emotion_stats')
    op.drop_table('emotion_stats')
    op.drop_column('email_verifications', 'is_used')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('email_verifications', sa.Column('is_used', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.create_table('emotion_stats',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('month', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('emotion', postgresql.ENUM('happy', 'sad', 'angry', 'peaceful', 'unrest', name='emotion_type'), autoincrement=False, nullable=False),
    sa.Column('count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.CheckConstraint('count >= 0', name='emotion_stats_count_check'),
    sa.CheckConstraint('month >= 1 AND month <= 12', name='emotion_stats_month_check'),
    sa.CheckConstraint('year >= 2024 AND year <= 2099', name='emotion_stats_year_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_emotion_stats_user_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='emotion_stats_pkey')
    )
    op.create_index('idx_emotion_stats_user_period', 'emotion_stats', ['user_id', 'year', 'month'], unique=False)
    op.create_index('idx_emotion_stats_unique', 'emotion_stats', ['user_id', 'year', 'month', 'emotion'], unique=True)
    op.create_table('ai_usage_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('api_type', postgresql.ENUM('generate', 'keywords', 'emotion_analysis', name='api_type'), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('regeneration_count', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('regeneration_count >= 1 AND regeneration_count <= 5', name='ai_usage_logs_regeneration_count_check'),
    sa.CheckConstraint('tokens_used > 0', name='ai_usage_logs_tokens_used_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_ai_usage_logs_user_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ai_usage_logs_pkey')
    )
    op.create_index('idx_ai_usage_logs_user_sessions', 'ai_usage_logs', ['user_id', 'session_id', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_ai_usage_logs_user_created', 'ai_usage_logs', ['user_id', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_ai_usage_logs_session_regen', 'ai_usage_logs', ['session_id', 'regeneration_count'], unique=False)
    op.drop_index('idx_notification_history_user_id', table_name='notification_history')
    op.drop_index('idx_notification_history_type', table_name='notification_history')
    op.drop_index('idx_notification_history_status', table_name='notification_history')
    op.drop_index('idx_notification_history_sent_at', table_name='notification_history')
    op.drop_table('notification_history')
    op.drop_index('idx_notification_settings_user_id', table_name='notification_settings')
    op.drop_table('notification_settings')
    op.drop_index(op.f('ix_fcm_tokens_token'), table_name='fcm_tokens')
    op.drop_index('idx_fcm_tokens_user_id', table_name='fcm_tokens')
    op.drop_index('idx_fcm_tokens_device_type', table_name='fcm_tokens')
    op.drop_index('idx_fcm_tokens_active', table_name='fcm_tokens')
    op.drop_table('fcm_tokens')
    # ### end Alembic commands ###